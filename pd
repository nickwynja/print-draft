#! /bin/bash
SKIP_PRINT=false
PRINT_RANGE=false
RETURN_HASH_ONLY=false

while getopts dhro:p: option
do
  case "${option}"
    in
    h)
      echo "Instantly print your draft in a well-set layout."
      echo ""
      echo "pd [OPTIONS] [FILE]"
      echo "  -h     show this message"
      echo "  -r     print a hash of the file contents"
      echo "  -d     Don't print, just export to PDF"
      echo "  -o     Output file path and name. Defaults to /tmp/{filename}.pdf"
      echo "  -p     A print range for lp. See lp manual for format"
      echo ""
      echo "Examples:"
      echo "  pd first-draft.md"
      echo "  pd -p 1-2 first-draft.md"
      echo "  pd -d first-draft.md && open first-draft.pdf"
      exit 0;;
    d) SKIP_PRINT=true;;
    r) RETURN_HASH_ONLY=true;;
    o) OUTPUT_OPT=${OPTARG};;
    p) PRINT_RANGE=${OPTARG};;
  esac
done
shift $((OPTIND -1))

FNAME=$1
PDF_ENGINE="lualatex"
FILTERS=$PD_PANDOC_FILTERS
INPUT_FORMAT="markdown"
TEMPLATE="template-draft.tex"
PDF_PATH="/tmp"
OUTPUT_PATH=${OUTPUT_OPT:-"$PDF_PATH/$(basename $FNAME .md).pdf"}

function GenerateDraftHash {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    HASH=$(md5 -q  $FNAME | cut -c 26- | tr -cd '[:print:]')
  else
    HASH=$(md5sum $FNAME | awk '{ print $1 }' | cut -c 26- | tr -cd '[:print:]')
  fi
  echo "$HASH"
}

function SetFilters {
  FILTERS_ARR=($FILTERS)
  for F in $FILTERS; do FILTER_STRING="$FILTER_STRING -F $F"; done
}

function GeneratePDF {
  echo -n "Generating... "
  pandoc -f $INPUT_FORMAT \
    --pdf-engine $PDF_ENGINE \
    --template $TEMPLATE \
    -V filecontentshash:"`GenerateDraftHash $FNAME`" \
    -V draftfilename:"$FNAME" \
    $FILTER_STRING \
    --output $OUTPUT_PATH \
    $FNAME
  PANDOC_EXIT=`echo $?`
  if [ $PANDOC_EXIT == 0 ]; then
    echo "Done"
  fi
}

function PrintPDF {

  if [ "$PRINT_RANGE" != "false" ]; then
    PRINT_RANGE_OPTION="-o page-ranges=$PRINT_RANGE"
  fi

  echo -n "Printing... "
  lp -o fit-to-page \
    -o sides=one-sided \
    $PRINT_RANGE_OPTION \
    $OUTPUT_PATH >/dev/null
  echo "Done"
}

function CleanUp {
  rm -r $OUTPUT_PATH
}

if [[ "$RETURN_HASH_ONLY" = "true" ]]; then
  GenerateDraftHash
else
  SetFilters
  GeneratePDF
  if [[ "$SKIP_PRINT" = "false" ]] && [ $PANDOC_EXIT == 0 ]; then
    PrintPDF
    CleanUp
  fi
fi



